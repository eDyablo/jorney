SubDir TOP zeromq ;

zeromq.dir.root = [ FDirName $(TOP) zeromq ] ;
zeromq.libzmq.dir.root = [ FDirName $(zeromq.dir.root) libzmq ] ;
zeromq.libzmq.dir.include = [ FDirName $(zeromq.libzmq.dir.root) include ] ;
zeromq.libzmq.dir.source = [ FDirName $(zeromq.libzmq.dir.root) src ] ;
zeromq.cppzmq.dir.include = [ FDirName $(zeromq.dir.root) cppzmq ] ;
zeromq.clrzmq4.dir.root = [ FDirName $(zeromq.dir.root) clrzmq4 ] ;

if $(PLATFORM) in win32 win64
{
	C.Defines libzmq :
			_DLL
			_UNICODE
			_WIN32
			_WINDLL
			_WINSOCK_DEPRECATED_NO_WARNINGS
			DLL_EXPORT
			FD_SETSIZE=16384
			UNICODE
			WIN32
			WIN32_LEAN_AND_MEAN
			ZMQ_USE_SELECT
			;

	if $(PLATFORM) = win64
	{
		C.Defines libzmq :
				_WIN64
				WIN64
				;
	}

	if $(CONFIG) = debug
	{
		C.Defines libzmq :
				_DEBUG
				;
	}

	C.IncludeDirectories libzmq : [ FDirName $(zeromq.libzmq.dir.root) builds msvc ] ;

	C.LinkPrebuiltLibraries libzmq :
			Advapi32.lib
			Iphlpapi.lib
			Ws2_32.lib
			;
}

libzmq.binaries = [ C.Library libzmq :
		@($(zeromq.libzmq.dir.source)/*.cpp:W=$(zeromq.dir.root)/) :
		shared ] ;

BINDING on libzmq.dll = $(libzmq.binaries[1]:T) ;
BINDING on libzmq.lib = $(libzmq.binaries[2]:T) ;
BINDING on libzmq.pdb = $(libzmq.binaries[1]:TS=.pdb) ;

Depends libzmq.dll : @(libzmq.dll:T) : $(libzmq.binaries) ;
Depends libzmq.lib : @(libzmq.lib:T) : $(libzmq.binaries) ;
Depends libzmq.pdb : @(libzmq.pdb:T) : $(libzmq.binaries) ;

rule ZeroMQ.Use TARGET : OPTIONS : DIRECTORY
{
	DIRECTORY = $(DIRECTORY:E="") ;
	C.IncludeDirectories $(TARGET) :
			$(zeromq.cppzmq.dir.include)
			$(zeromq.libzmq.dir.include)
			;
	if link in $(OPTIONS)
	{
		C.LinkDirectories $(TARGET) : $(zeromq.libzmq.dir.library)	;
		C.LinkLibraries $(TARGET) : libzmq ;
	}
	if install in $(OPTIONS)
	{
		local location = $(LOCATE_TARGET) ;
		local targetDll = [ FDirName $(location) $(DIRECTORY) @(libzmq.dll:TBS) ] ;
		CopyFile $(TARGET) : $(targetDll) : @(libzmq.dll:T) ;
		Clean clean:$(TARGET) : $(targetDll) ;
		if $(CONFIG) = debug
		{
			local targetPdb = [ FDirName $(location) $(DIRECTORY) @(libzmq.pdb:TBS) ] ;
			CopyFile $(TARGET) : $(targetPdb) : @(libzmq.pdb:T) ;
			Clean clean:$(TARGET) : $(targetPdb) ;
		}
	}
}

CSharp.CscFlags clrzmq :
		/unsafe
		;

CSharp.Library clrzmq :
		@($(zeromq.clrzmq4.dir.root)/*.cs:W=$(zeromq.dir.root)/)
		@($(zeromq.clrzmq4.dir.root)/Devices/*.cs:W=$(zeromq.dir.root)/)
		@($(zeromq.clrzmq4.dir.root)/lib/*.cs:W=$(zeromq.dir.root)/)
		@($(zeromq.clrzmq4.dir.root)/Monitoring/*.cs:W=$(zeromq.dir.root)/)
		;

BINDING on clrzmq.dll = [ FDirName [ CSharp._retrieveOutputPath clrzmq ] [ CSharp._retrieveOutputName clrzmq : $(SUFSHAREDLIB:Z=$(C.COMPILER_SUITE_SYMBOL)) ] ] ;

Depends clrzmq.dll : @(clrzmq.dll:T) : clrzmq ;

rule ZeroMQ.CLR.Use TARGET : OPTIONS
{
	TAREGT = [ C.ActiveTarget $(TARGET) ] ;
	if link in $(OPTIONS)
	{
		CSharp.ReferenceAssemblies $(TARGET) : @(clrzmq.dll:T) ;
	}
	if install in $(OPTIONS)
	{
		local location = $(LOCATE_TARGET) ;
		CopyFile $(TARGET) : $(location)/@(clrzmq.dll:TBS) : @(clrzmq.dll:T) ;
		Clean clean:$(TARGET) : $(location)/@(clrzmq.dll:TBS) ;
		if $(PLATFORM) in win32 macosx32
		{
			ZeroMQ.Use $(TARGET) : install : i386 ;
		}
		if $(PLATFORM) in win64 macosx64
		{
			ZeroMQ.Use $(TARGET) : install : amd64 ;
		}
	}
}

if $(PLATFORM) in win32 macosx32
{
	csharp.flags = /platform:x86 ;
}
else if $(PLATFORM) in win64 macosx64
{
	csharp.flags = /platform:x64 ;
}

if $(OS) = MACOSX
{
	csharp.flags = $(CSC_COMPILER) $(csharp.flags) ;
}